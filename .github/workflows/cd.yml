name: CD

permissions:
  contents: none
  packages: read

on:
  workflow_dispatch:
    inputs:
      environment:
        description: environment
        required: true
        type: choice
        options: [ "production", "development" ]
        default: "production"
      version:
        description: version
        required: true
        default: "latest"

env:
  REGISTRY: ghcr.io

jobs:
  deploy:
    # Job名称会动态显示正在部署的环境
    name: Deploy ${{ github.event.inputs.version }} to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    # 关联到GitHub的环境，可以添加审批等保护规则
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Deploy to Server
        # 使用一个流行的、可靠的SSH Action
        uses: appleboy/ssh-action@master
        with:
          # 从GitHub Secrets中读取服务器连接信息
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22 # SSH端口，默认为22

          # 在远程服务器上执行的脚本
          script: |
            set -e

            echo "Logging into GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u "${{ github.actor }}"
            --password-stdin
  
            export ABACUSFLOW_SERVER_VERSION=${{ github.event.inputs.version }}
            export ABACUSFLOW_WEBAPP_VERSION=${{ github.event.inputs.version }}

            # 进入项目部署目录
            cd /opt/abacusflow/abacusflow/

            echo "Starting deployment of version ${{github.event.inputs.version}} to ${{github.event.inputs.environment }}..."

            # 根据环境选择不同的 docker-compose 文件
            if [ "${{ github.event.inputs.environment }}" = "production" ]; then
              echo "Using production compose file..."
              docker compose -f docker-compose-prod.yml pull
              docker compose -f docker-compose-prod.yml up -d --remove-orphans
            elif [ "${{ github.event.inputs.environment }}" = "development" ]; then
              echo "Using development compose file..."
              docker compose -f docker-compose-dev.yml pull
              docker compose -f docker-compose-dev.yml up -d --remove-orphans
            else
              echo "Error: Unknown environment '${{ github.event.inputs.environment }}'"
              exit 1
            fi

            echo "Deployment completed successfully."